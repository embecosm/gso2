defaults:
  operands:
    - type: "RegisterSlot"
      modifier: "rw"
      class: "ALL_REGISTERS"
machine:
  register_slot_type: "AVRRegisterSlot"
  register_class_type: "AvrRegisterClasses"
  machine_type_name: "AvrMachine"
  class_prefix: "Avr_"
  register_type: "uint8_t"
instructions:
  add:
    operands:
      - modifier: "rw"
      - modifier: "r"
    implementation: |
      rA = rA + rB;
    print_name: "add"
    format: "add %s, %s"
  sub:
    operands:
      - modifier: "rw"
      - modifier: "r"
    implementation: |
      rA = rA - rB;
    print_name: "sub"
    format: "sub %s, %s"
  eor:
    operands:
      - modifier: "rw"
      - modifier: "r"
    implementation: |
      rA = rA ^ rB;
    print_name: "eor"
    format: "eor %s, %s"
  and:
    operands:
      - modifier: "rw"
      - modifier: "r"
    implementation: |
      rA = rA & rB;
    print_name: "and"
    format: "and %s, %s"
  mul:
    operands:
      - modifier: "r"
      - modifier: "r"
      - modifier: "w"
        class: "REGISTER0"
      - modifier: "w"
        class: "REGISTER1"
    implementation: |
      rC = (rA * rB) & 0xFF;
      rD = (rA * rB) >> 8;
    print_name: "mul"
    format: "mul %s, %s"
  inc:
    operands:
      - modifier: "rw"
    implementation: |
      rA = rA + 1;
    print_name: "inc"
    format: "inc %s"
  dec:
    operands:
      - modifier: "rw"
    implementation: |
      rA = rA - 1;
    print_name: "dec"
    format: "dec %s"
  swap:
    operands:
      - modifier: "rw"
    implementation: |
      rA = (rA >> 4) | ((rA << 4) & 0xFF);
    print_name: "swap"
    format: "swap %s"
  ldi:
    operands:
      - type: "RegisterSlot"
        modifier: "w"
      - type: "ConstantSlot"
        ranges:
          - lower: 0
            upper: 255
    implementation: |
      rA = cB;
    print_name: "ldi"
    format: "ldi %s, %s"
  movw:
    operands:
      - type: "RegisterSlot"
        modifier: "w"
        class: "REGISTER_EVEN"
      - type: "RegisterSlot"
        modifier: "r"
        class: "REGISTER_EVEN"
    implementation: |
      uint8_t rB_p = mach->getRegisterValue(slots[1]->getValue()+1);

      rA = rB;
      mach->setRegisterValue(slots[0]->getValue()+1, rB_p);
    print_name: "movw"
    format: "movw %s, %s"
  adiw:
    operands:
      - type: "RegisterSlot"
        modifier: "rw"
        class: "REGISTER_24PLUS_EVEN"
      - type: "ConstantSlot"
        ranges:
          - lower: 0
            upper: 63
    implementation: |
      uint8_t rA_p = mach->getRegisterValue(slots[0]->getValue()+1);

      uint16_t tmp = (rA_p << 8) | rA;

      tmp += cB;

      rA = tmp & 0xFF;
      mach->setRegisterValue(slots[0]->getValue()+1, (tmp >> 8)&0xFF);
    print_name: "adiw"
    format: "adiw %s, %s"
